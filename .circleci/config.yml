# trigger build
version: 2
debug: true
jobs:
  build:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run: make install
      - run:
          name: "Testing the code submitted"
          command: "make accept"
      - store_artifacts:
          path: .
      - persist_to_workspace:
          root: .
          paths:
            - .
  build-master:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run: make install
      - run:
          name: "Testing the example submit"
          command: "make submit solution-file=solution/example-A.c"
      - run:
          name: "Testing the example accept"
          command: "make accept"
      - store_artifacts:
          path: .
  compile-and-execute:
    docker:
      - image: circleci/python:2.7
    steps:
      - run: bash scripts/compile-solution.sh
      - store_artifacts:
          path: .
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-score:
    docker:
      - image: circleci/python:2.7
    steps:
      - attach_workspace:
          at: .
      - run: git clone https://github.com/open-competitive-coding/website.git
      - run: git config --global user.name "MadaraUchiha-314" && git config --global user.email "rohithr31@gmail.com"
      - run: source scripts/constants.sh && SOLUTION_FILE=$(cat $SOLUTION_FILE_NAME | cut -f 1 -d '.' | sed 's/solution\///g') && cd website/ && python scripts/add-submission.py $CIRCLE_USERNAME $SOLUTION_FILE
      - run: cd website/ && git add . && git commit -m "[CI] Updating Score"
      - run: cd website/ && git push -q https://${GITHUB_PERSONAL_TOKEN}@github.com/open-competitive-coding/website.git master
      - store_artifacts:
          path: .
workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
              branches:
                  ignore:
                      - master
      - compile-and-execute:
          requires:
              - build
      - deploy-score:
          requires:
              - compile-and-execute
          filters:
              branches:
                  ignore:
                      - master
      - build-master:
          filters:
              branches:
                  only:
                      - master
